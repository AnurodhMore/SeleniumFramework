<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="5" passed="4" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-08-13T13:18:34 IST" name="Suite" finished-at="2023-08-13T13:19:06 IST" duration-ms="31915">
    <groups>
      <group name="ErrorHandling">
        <method signature="ErrorValidationsTest.loginErrorValidation()[pri:0, instance:Academy.tests.ErrorValidationsTest@29d80d2b]" name="loginErrorValidation" class="Academy.tests.ErrorValidationsTest"/>
      </group> <!-- ErrorHandling -->
      <group name="Purchase">
        <method signature="SubmitTest.submitOrder(java.util.HashMap)[pri:0, instance:Academy.tests.SubmitTest@304bb45b]" name="submitOrder" class="Academy.tests.SubmitTest"/>
      </group> <!-- Purchase -->
    </groups>
    <test started-at="2023-08-13T13:18:34 IST" name="Error Validations Test" finished-at="2023-08-13T13:18:55 IST" duration-ms="20825">
      <class name="Academy.tests.ErrorValidationsTest">
        <test-method is-config="true" signature="launchApplication()[pri:0, instance:Academy.tests.ErrorValidationsTest@29d80d2b]" started-at="2023-08-13T13:18:34 IST" name="launchApplication" finished-at="2023-08-13T13:18:43 IST" duration-ms="9039" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApplication -->
        <test-method signature="loginErrorValidation()[pri:0, instance:Academy.tests.ErrorValidationsTest@29d80d2b]" started-at="2023-08-13T13:18:43 IST" name="loginErrorValidation" finished-at="2023-08-13T13:18:44 IST" duration-ms="1020" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginErrorValidation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:Academy.tests.ErrorValidationsTest@29d80d2b]" started-at="2023-08-13T13:18:44 IST" name="tearDown" finished-at="2023-08-13T13:18:44 IST" duration-ms="394" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="launchApplication()[pri:0, instance:Academy.tests.ErrorValidationsTest@29d80d2b]" started-at="2023-08-13T13:18:44 IST" name="launchApplication" finished-at="2023-08-13T13:18:51 IST" duration-ms="6449" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApplication -->
        <test-method signature="productErrorValidation()[pri:0, instance:Academy.tests.ErrorValidationsTest@29d80d2b]" started-at="2023-08-13T13:18:51 IST" name="productErrorValidation" finished-at="2023-08-13T13:18:54 IST" duration-ms="3668" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- productErrorValidation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:Academy.tests.ErrorValidationsTest@29d80d2b]" started-at="2023-08-13T13:18:54 IST" name="tearDown" finished-at="2023-08-13T13:18:55 IST" duration-ms="178" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- Academy.tests.ErrorValidationsTest -->
    </test> <!-- Error Validations Test -->
    <test started-at="2023-08-13T13:18:34 IST" name="Submit Test" finished-at="2023-08-13T13:19:06 IST" duration-ms="31915">
      <class name="Academy.tests.SubmitTest">
        <test-method is-config="true" signature="launchApplication()[pri:0, instance:Academy.tests.SubmitTest@304bb45b]" started-at="2023-08-13T13:18:34 IST" name="launchApplication" finished-at="2023-08-13T13:18:43 IST" duration-ms="8647" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApplication -->
        <test-method signature="submitOrder(java.util.HashMap)[pri:0, instance:Academy.tests.SubmitTest@304bb45b]" started-at="2023-08-13T13:18:43 IST" name="submitOrder" data-provider="getData" finished-at="2023-08-13T13:18:48 IST" duration-ms="5614" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{password=Anurodh18$, product=ZARA COAT 3, email=anurodhmore18@gmail.com}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitOrder -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:Academy.tests.SubmitTest@304bb45b]" started-at="2023-08-13T13:18:48 IST" name="tearDown" finished-at="2023-08-13T13:18:48 IST" duration-ms="147" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="launchApplication()[pri:0, instance:Academy.tests.SubmitTest@304bb45b]" started-at="2023-08-13T13:18:48 IST" name="launchApplication" finished-at="2023-08-13T13:18:55 IST" duration-ms="6614" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApplication -->
        <test-method signature="submitOrder(java.util.HashMap)[pri:0, instance:Academy.tests.SubmitTest@304bb45b]" started-at="2023-08-13T13:18:55 IST" name="submitOrder" data-provider="getData" finished-at="2023-08-13T13:18:59 IST" duration-ms="4243" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{password=Anurodh18$, product=ADIDAS ORIGINAL, email=testuser18@gmail.com}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitOrder -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:Academy.tests.SubmitTest@304bb45b]" started-at="2023-08-13T13:18:59 IST" name="tearDown" finished-at="2023-08-13T13:19:00 IST" duration-ms="155" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="launchApplication()[pri:0, instance:Academy.tests.SubmitTest@304bb45b]" started-at="2023-08-13T13:19:00 IST" name="launchApplication" finished-at="2023-08-13T13:19:05 IST" duration-ms="5105" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApplication -->
        <test-method signature="orderHistoryTests()[pri:0, instance:Academy.tests.SubmitTest@304bb45b]" started-at="2023-08-13T13:19:05 IST" name="orderHistoryTests" finished-at="2023-08-13T13:19:05 IST" depends-on-methods="Academy.tests.SubmitTest.submitOrder" duration-ms="284" status="FAIL">
          <exception class="org.openqa.selenium.InvalidSelectorException">
            <message>
              <![CDATA[invalid selector: An invalid or illegal selector was specified
  (Session info: chrome=115.0.5790.171)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception
Build info: version: '4.10.0', revision: 'c14d967899'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '19.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [ed335d4e8ac34a1ebd16cab5d7afe2ed, findElement {using=css selector, value=//button[@routerlink='/dashboard/myorders']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 115.0.5790.171, chrome: {chromedriverVersion: 115.0.5790.170 (cc0d30c2ca5..., userDataDir: C:\Users\anumore\AppData\Lo...}, goog:chromeOptions: {debuggerAddress: localhost:51639}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:51639/devtoo..., se:cdpVersion: 115.0.5790.171, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: ed335d4e8ac34a1ebd16cab5d7afe2ed]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.InvalidSelectorException: invalid selector: An invalid or illegal selector was specified
  (Session info: chrome=115.0.5790.171)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception
Build info: version: '4.10.0', revision: 'c14d967899'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '19.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [ed335d4e8ac34a1ebd16cab5d7afe2ed, findElement {using=css selector, value=//button[@routerlink='/dashboard/myorders']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 115.0.5790.171, chrome: {chromedriverVersion: 115.0.5790.170 (cc0d30c2ca5..., userDataDir: C:\Users\anumore\AppData\Lo...}, goog:chromeOptions: {debuggerAddress: localhost:51639}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:51639/devtoo..., se:cdpVersion: 115.0.5790.171, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: ed335d4e8ac34a1ebd16cab5d7afe2ed
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:484)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:199)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:132)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:51)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:531)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:350)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:344)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy16.click(Unknown Source)
at Academy.AbstractComponents.AbstractComponent.goToOrderPage(AbstractComponent.java:75)
at Academy.tests.SubmitTest.orderHistoryTests(SubmitTest.java:87)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:481)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:58)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1589)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.InvalidSelectorException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- orderHistoryTests -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:Academy.tests.SubmitTest@304bb45b]" started-at="2023-08-13T13:19:05 IST" name="tearDown" finished-at="2023-08-13T13:19:06 IST" duration-ms="129" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- Academy.tests.SubmitTest -->
    </test> <!-- Submit Test -->
  </suite> <!-- Suite -->
</testng-results>
